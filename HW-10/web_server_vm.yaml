resources:
#bucket
- name: ds-561-gcs-bucket
  type: storage.v1.bucket
  properties:
    location: us-central1

#service account
- name: my-service-account
  type: iam.v1.serviceAccount
  properties:
    accountId: ds561-service-account
    displayName: My Service Account

#sql instance
- name: my-cloud-sql-instance
  type: sqladmin.v1beta4.instance
  properties:
    backendType: SECOND_GEN
    instanceType: CLOUD_SQL_INSTANCE
    region: us-central1
    databaseVersion: MYSQL_5_7
    settings:
      tier: db-f1-micro
    dependsOn:
    - my-service-account    

#VM web server
- name: my-vm-web-server
  type: compute.v1.instance
  properties:
    zone: us-central1-a
    machineType: zones/us-central1-a/machineTypes/e2-micro
    disks:
    - deviceName: boot
      type: PERSISTENT
      boot: true
      autoDelete: true
      initializeParams:
        sourceImage: projects/debian-cloud/global/images/family/debian-10
    networkInterfaces:
    - network: global/networks/default
      accessConfigs:
      - name: External NAT
        type: ONE_TO_ONE_NAT
    serviceAccounts:
    - email: "966904513519-compute@developer.gserviceaccount.com"
      scopes:
      - "https://www.googleapis.com/auth/userinfo.email"
      - "https://www.googleapis.com/auth/cloud-platform"
      - "https://www.googleapis.com/auth/sqlservice.admin"      
      - "https://www.googleapis.com/auth/pubsub"               
      - "https://www.googleapis.com/auth/logging.write"
  
    tags:
      items:
      - http-server
      - https-server    
    metadata:
      items:
      - key: google-logging-enabled
        value: "true"
      - key: files-bucket
        value: $(ref.ds-561-gcs-bucket.name)
      - key: startup-script
        value: |
          #!/bin/bash
          apt-get update
          apt-get install -yq git python3-pip python3-venv nginx
          pip3 install --upgrade pip

          # Set the directory paths for the repository and HW-4
          REPO_DIR="/opt/app2"
          HW5_DIR="$REPO_DIR/HW-10"

          # Clone the source code repository if it doesn't exist
          if [ ! -d "$REPO_DIR" ]; then
              git clone https://github.com/vanisinghal0201/cloud_ds-561.git $REPO_DIR
          fi

          # Create a Python virtual environment 
          if [ ! -d "$HW5_DIR/env" ]; then
              python3 -m venv $HW5_DIR/env
              $HW5_DIR/env/bin/pip install --upgrade pip
              $HW5_DIR/env/bin/pip install -r $HW5_DIR/requirements.txt
          fi

          # Change the working directory to HW-5
          cd $HW5_DIR

          mkdir files

          python3 generate.py -n 10000 -m 250

          gsutil mkdir gs://ds-561-gcs-bucket/files 

          # Upload generated files to GCS bucket
          gsutil cp -r files gs://ds-561-gcs-bucket/

          # Configure Nginx for the Flask app
          NGINX_CONF="/etc/nginx/sites-available/flask_app"
          if [ ! -f "$NGINX_CONF" ]; then
              cat > /etc/nginx/sites-available/flask_ap <<EOL
              server {
                  listen 80;
                  server_name _;

                  location / {
                      proxy_pass http://127.0.0.1:8080;
                      proxy_set_header Host \$host;
                      proxy_set_header X-Real-IP \$remote_addr;
                      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  }
              }
              EOL

              # Enable the Nginx configuration by creating a symlink
              ln -s /etc/nginx/sites-available/flask_app /etc/nginx/sites-enabled/
          fi

          # Remove the default Nginx configuration if it exists
          if [ -e /etc/nginx/sites-enabled/default ]; then
              rm /etc/nginx/sites-enabled/default
          fi

          # Restart Nginx to apply the configuration
          systemctl restart nginx

          # Check if Gunicorn is running for hw-4, and if not, start it as a daemon
          if ! pgrep -f "gunicorn -b 0.0.0.0:8080 main:app"; then
              $HW5_DIR/env/bin/gunicorn -b 0.0.0.0:8080 main:app --daemon

    dependsOn:
    - ds-561-gcs-bucket
    - my-service-account

# Add firewall rules for HTTP and HTTPS
- name: allow-http
  type: compute.v1.firewall
  properties:
    network: global/networks/default
    sourceRanges: ["0.0.0.0/0"]
    allowed:
      - IPProtocol: TCP
        ports: ["80"]

- name: allow-https
  type: compute.v1.firewall
  properties:
    network: global/networks/default
    sourceRanges: ["0.0.0.0/0"]
    allowed:
      - IPProtocol: TCP
        ports: ["443"]




          
        

